{"version":3,"sources":["components/register.component.js","components/login.component.js","components/home.component.js","components/logout.component.js","components/navbar.component.js","App.js","serviceWorker.js","index.js"],"names":["Register","props","onChangeUsername","bind","onChangePassword","onChangeConfirmPassword","onSubmit","state","username","password","confirmPassword","registrationError","e","this","setState","target","value","preventDefault","user","events","axios","post","then","res","console","log","data","history","push","style","color","className","type","required","onChange","Component","Login","loginError","loggedInStatus","usename","Cookies","set","updateHandler","catch","error","to","pathname","Home","undefined","checkLoginStatus","Logout","remove","localStorage","setItem","Navbar","onClick","App","status","get","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.53188eea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n    this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      registrationError: \"\",\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeConfirmPassword(e) {\r\n    this.setState({\r\n      confirmPassword: e.target.value,\r\n    });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      events: [],\r\n    };\r\n\r\n    if (user.password !== this.state.confirmPassword) {\r\n      this.setState({\r\n        registrationError: \"Hasła muszą być takie same\",\r\n      });\r\n    } else {\r\n      \r\n      axios\r\n        .post(\"http://192.168.1.21:5000/users/add\", user)\r\n        .then((res) => console.log(res.data));\r\n      \r\n\r\n      this.setState({\r\n        username: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        registrationError: \"\",\r\n      });\r\n\r\n      this.props.history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Zarejestruj się</h3>\r\n        <p style={{ color: \"red\" }}>{this.state.registrationError}</p>\r\n\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Nazwa użytkownika: </label>\r\n            <input\r\n              type=\"text\"\r\n              required\r\n              className=\"form-control\"\r\n              value={this.state.username}\r\n              onChange={this.onChangeUsername}\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              required\r\n              className=\"form-control\"\r\n              value={this.state.password}\r\n              onChange={this.onChangePassword}\r\n            />\r\n\r\n            <input\r\n              type=\"password\"\r\n              required\r\n              className=\"form-control\"\r\n              value={this.state.confirmPassword}\r\n              onChange={this.onChangeConfirmPassword}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Zarejestruj\"\r\n              className=\"btn btn-primary\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loginError: \"\",\r\n      loggedInStatus: this.props.loggedInStatus,\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({ \r\n      loggedInStatus: props.loggedInStatus,\r\n      usename: props.username\r\n     })\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    };\r\n\r\n    axios\r\n      .post(\"http://192.168.1.21:5000/users/login\", user)\r\n      .then((res) => {\r\n        if (res.data) {\r\n            this.setState({\r\n              username: user.username,\r\n              password: \"\",\r\n              loginError: \"\",\r\n              loggedInStatus: true,\r\n            });\r\n\r\n            Cookies.set('loggedInStatus', true);\r\n            Cookies.set('username', user.username);\r\n\r\n            \r\n            this.props.updateHandler(true, this.state.username);\r\n            this.props.history.push(\"/\");\r\n        } else {\r\n            this.setState({\r\n                loginError: \"Niewłaściy login lub hasło\",\r\n              });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          loginError: \"Błąd logowania\" + error,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loggedInStatus) {\r\n      return <Redirect to={{pathname: '/', state: {loggedInStatus: true, username: this.state.username}}}  />;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h3>Zaloguj się</h3>\r\n          <p style={{ color: \"red\" }}>{this.state.loginError}</p>\r\n\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Nazwa użytkownika: </label>\r\n              <input\r\n                type=\"text\"\r\n                required\r\n                className=\"form-control\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                required\r\n                className=\"form-control\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"submit\"\r\n                value=\"Zaloguj\"\r\n                className=\"btn btn-primary\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: this.props.username,\r\n      loggedInStatus: this.props.loggedInStatus,\r\n    };\r\n  }\r\n\r\n  checkLoginStatus() { \r\n    if (typeof(this.state.username) !== \"undefined\" && this.state.username !== undefined && this.state.username !== null ) {\r\n      console.log(\"wysyłam: \" + this.state.username);\r\n      console.log(\"wysyłam: \" + this.state.loggedInStatus);\r\n      axios\r\n        .post(\"http://localhost:5000/users/login_status\", this.state.username)\r\n        .then((res) => {\r\n          console.log(\"odebrałem:\" + res.data);\r\n          this.setState({\r\n            loggedInStatus: res.data,\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.checkLoginStatus();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loggedInStatus) {\r\n      return <h1>ELOO {this.state.username}</h1>;\r\n    } else {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport default class Logout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    Cookies.remove('loggedInStatus');\r\n    Cookies.remove('username', '');\r\n  }\r\n\r\n  render() {\r\n    localStorage.setItem(\"loggedInStatus\", false);\r\n      return (\r\n        <div>\r\n          <h3>Wylogowano</h3>\r\n        \r\n          <Link to=\"/login\" className=\"navbar-brand\">\r\n            Zaloguj się ponownie\r\n          </Link>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loggedInStatus: this.props.loggedInStatus,\r\n      username: this.props.username,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({\r\n      loggedInStatus: props.loggedInStatus,\r\n      username: props.username,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loggedInStatus) {\r\n      return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            Terminarz\r\n          </Link>\r\n          <div className=\"collpase navbar-collapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"navbar-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link\r\n                  to=\"/logout\"\r\n                  className=\"nav-link\"\r\n                  onClick={() =>\r\n                    this.props.updateHandler(false, this.state.username)\r\n                  }\r\n                >\r\n                  Logout\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      );\r\n    } else {\r\n      return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            Terminarz\r\n          </Link>\r\n          <div className=\"collpase navbar-collapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"navbar-item\">\r\n                <Link to=\"/login\" className=\"nav-link\">\r\n                  Login\r\n                </Link>\r\n              </li>\r\n              <li className=\"navbar-item\">\r\n                <Link to=\"/register\" className=\"nav-link\">\r\n                  Rejestracja\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Cookies from 'js-cookie';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport Register from \"./components/register.component\";\r\nimport Login from \"./components/login.component\";\r\nimport Home from \"./components/home.component\";\r\nimport Logout from \"./components/logout.component\";\r\nimport Navbar from \"./components/navbar.component\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.updateHandler = this.updateHandler.bind(this);\r\n\r\n    if(Cookies.get('username') !== undefined || Cookies.get('username') !== ''){\r\n      this.state = {\r\n        loggedInStatus: Cookies.get('loggedInStatus'),\r\n        username: Cookies.get('username'),\r\n      };  \r\n    } else {\r\n      this.state = {\r\n        loggedInStatus: false,\r\n        username: '',\r\n      };  \r\n    }\r\n    \r\n    this.updateHandler();\r\n  }\r\n  \r\n  updateHandler = (status, username) => {\r\n    this.setState({\r\n      loggedInStatus: status,\r\n      username: username\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"container\">\r\n          <Navbar \r\n            loggedInStatus={this.state.loggedInStatus}\r\n            updateHandler={this.updateHandler}\r\n          />\r\n          <Switch>\r\n            <Route\r\n              path=\"/login\" \r\n              render={(props) => <Login updateHandler={this.updateHandler} {...props}/>}\r\n            />\r\n            <Route path=\"/register\" component={Register} />\r\n            <Route\r\n              path=\"/logout\"\r\n              component={Logout}\r\n            />\r\n            <Route path=\"/\"\r\n              render={(props) => <Home username={this.state.username} loggedInStatus={this.state.loggedInStatus} {...props}/>}\r\n            />\r\n          </Switch>\r\n          <br />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}